#version 330 core
out vec4 FragColor;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

//struct Material {
//    sampler2D diffuse;
//    sampler2D specular;    
//    float shininess;
//}; 

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;
  
    float constant;
    float linear;
    float quadratic;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;       
};

#define NR_SPOT_LIGHTS 2

in vec3 FragPos;  
in vec3 Normal;
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform vec3 objectColor;
uniform Material material;
uniform Light pointlight;
uniform SpotLight spotLights[NR_SPOT_LIGHTS];
uniform vec3 ambientColor;
uniform sampler2D diffuseTex;
uniform sampler2D diffuseTex2;
uniform sampler2D specularTex;

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);


void main()
{
    // properties
    vec3 norm = normalize(Normal);
    vec3 viewDir = normalize(viewPos - FragPos);
    
    // phase 1: Point lights
        vec3 lightDir = normalize(pointlight.position - FragPos);

        // diffuse shading
        float diff = max(dot(norm, lightDir), 0.0);

        // specular shading
        vec3 reflectDir = reflect(-lightDir, norm);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

        // combine results
        vec3 ambient = pointlight.ambient * vec3(mix(texture(diffuseTex2, TexCoords), texture(diffuseTex, TexCoords), 0.5));
        vec3 diffuse = pointlight.diffuse * diff *  vec3(mix(texture(diffuseTex2, TexCoords), texture(diffuseTex, TexCoords), 0.5));
        vec3 specular = pointlight.specular * spec * vec3(texture(specularTex, TexCoords));
        vec3 result = (ambient + diffuse + specular);
        
    // phase 2: spot lights
        for(int i = 0; i < NR_SPOT_LIGHTS; i++)
            result += CalcSpotLight(spotLights[i], norm, FragPos, viewDir);




    //vec3 ambientColor = vec3(0.8, 0.7, 0.5); // Adjust the ambient color as needed

    // Calculate the distance from the camera
    float distanceFromCam = length(viewPos - FragPos);

    // Define the threshold distance where the ambient color starts to take over
    float ambientThreshold = 20.0;

    // Calculate the mix factor based on the distance
    float mixFactor = clamp(distanceFromCam / ambientThreshold, 0.0, 1.0);

    // Calculate the final color by interpolating between objectColor and ambientColor
    vec3 finalColor = mix(result/2, ambientColor, mixFactor);

    // Output the final color
    FragColor = vec4(finalColor, 1.0);
    //FragColor = texture(diffuseTex, TexCoords);
}

// calculates the color when using a spot light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 spotlightDir = normalize(light.position - FragPos);
    
    // check if lighting is inside the spotlight cone
    float theta = dot(spotlightDir, normalize(-light.direction)); 
    
    if(theta > light.outerCutOff) // remember that we're working with angles as cosines instead of degrees so a '>' is used.
    {    
        // ambient
        vec3 ambient = light.ambient * material.ambient;
        
        // diffuse
        float diff = max(dot(normal, spotlightDir), 0.0);
        vec3 diffuse = light.diffuse * (diff * material.diffuse);  
        
        // specular
        vec3 reflectDir = reflect(-spotlightDir, normal);  
        float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
        vec3 specular = light.specular * (spec * material.specular);  
        
        // spotlight (soft edges)
        float theta = dot(spotlightDir, normalize(-light.direction)); 
        float epsilon = (light.cutOff - light.outerCutOff);
        float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
        diffuse  *= intensity;
        specular *= intensity;


        // attenuation
        float distance    = length(light.position - FragPos);
        float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    

        // ambient  *= attenuation; // remove attenuation from ambient, as otherwise at large distances the light would be darker inside than outside the spotlight due the ambient term in the else branch
        diffuse   *= attenuation;
        specular *= attenuation;   
            
        vec3 result = ambient + diffuse + specular;
        return result;
    }
}